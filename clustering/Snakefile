rule run:
    input:
        fa = "QPRT.gene"
        #fa = "test.fasta"
    output:
        "graph.pdf"
    run:
        shell("./FastaToDeBruijn --fasta {input} -K 31 -C 1 --SS > graph.txt")
        import pandas as pd
        import copy
        data = pd.read_table('graph.txt', header=0, names=['id', 'from', '1', '2', '3'])
        
        rev = {k: list(v) for k,v in data.groupby("id")["from"]}
        fwd = {k: list(v) for k,v in data.groupby("from")["id"]}
        kmer = data.set_index('2')['id'].to_dict()
        

        count = 0
        start = 0
        stack = copy.copy(fwd[-1])
        mapping = {}
        while(stack):
            node = stack.pop()
            try:
                succ = fwd[node]
            except KeyError:
                mapping[node] = count
                count += 1
                continue

            mapping[node] = count
            if (len(succ) == 1):
                if (succ[0] in mapping):
                    count += 1
                    continue
                stack.append(succ[0])
                try:
                    if (len(fwd[succ[0]]) != 1 or len(rev[succ[0]]) !=1):
                        count += 1
                except KeyError:
                    count += 1
                    continue
            else:
                for s in succ:
                    if s not in mapping:
                        stack.append(s)
                count += 1
        print (mapping[kmer['GACTTTCAGGGCCTGCTGAGGAATCTGCAGG']])
        with open('graph.dot', 'w') as file:
            file.write("digraph all {\n")
            from pyfasta import Fasta
            ref = Fasta(input.fa)
            color = ['red', 'green', 'blue', 'yellow']
            col = 0
            for id in ref.keys():
                last = 0
                seq = ref[id]
                for ind in range(len(seq)-31):
                    if (str(mapping[kmer[seq[ind:ind+31]]]) != str(mapping[kmer[seq[ind+1:ind+32]]]) ):
                        file.write(str(mapping[kmer[seq[ind:ind+31]]]) + " -> " + str(mapping[kmer[seq[ind+1:ind+32]]]) + "[color=" + color[col]  +",penwidth=3.0, label="+ str(last)+'.'+str(ind+1)  +"] ;\n")
                        last = ind + 1
                col += 1
            file.write("}\n")
        shell("dot -Tpdf ./graph.dot -o ./graph.pdf")

rule run_orig:
    input:
        "QPRT.gene"
    output:
        "graph.pdf"
    run:
        shell("./FastaToDeBruijn --fasta {input} -K 31 -C 1 --SS > graph.txt")
        import pandas as pd
        data = pd.read_table('graph.txt', header=0, names=['id', 'from', '1', '2', '3'])
        
        with open('graph.dot', 'w') as file:
            file.write("digraph all {\n")
            for index, row in data.iterrows():
                prev = int(row['from'])
                if prev == -1:
                    prev = 0
                next = int(row['id'])
                if next == -1:
                    next = 0
                file.write(str(prev) + " -> " + str(next) + " ;\n")
            file.write("}\n")
        shell("dot -Tpdf ./graph.dot -o ./graph.pdf")

rule run_orig_color:
    input:
        fa = "QPRT.gene"
    output:
        "graph.pdf"
    run:
        shell("./FastaToDeBruijn --fasta {input} -K 31 -C 1 --SS > graph.txt")
        import pandas as pd
        data = pd.read_table('graph.txt', header=0, names=['id', 'from', '1', '2', '3'])
        
        rev = {k: list(v) for k,v in data.groupby("id")["from"]}
        fwd = {k: list(v) for k,v in data.groupby("from")["id"]}
        kmer = data.set_index('2')['id'].to_dict()
        
        with open('graph.dot', 'w') as file:
            file.write("digraph all {\n")
            
            from pyfasta import Fasta
            ref = Fasta(input.fa)
            color = ['red', 'green', 'blue', 'yellow']
            col = 0
            for id in ref.keys():
                print (id)
                seq = ref[id]
                for ind in range(len(seq)-31):
                    ckmer = seq[ind:ind+31]
                    nkmer = seq[ind+1:ind+32]
                    if (str(kmer[ckmer]) != str(kmer[nkmer]) ):
                        file.write(str(kmer[ckmer]) + " -> " + str(kmer[nkmer])  + "[color=" + color[col]  +",penwidth=3.0] ;\n")
                col += 1

            file.write("}\n")
rule run:
    input:
        "./RABL2B.gene"
    output:
        "graph.pdf"
    shell:
        """
        ../binary/gatb-core-1.1.0-Linux/bin/dbgh5 -abundance-min 1 -in {input} -out ./graph.h5 -kmer-size 31
        ../GATB/build/tools/GATB_1 -graph ./graph.h5 -out ./graph.dot
        dot -Tpdf ./graph.dot -o ./graph.pdf
        """
